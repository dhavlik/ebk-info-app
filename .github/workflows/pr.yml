name: Pull Request Validation

on:
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test & Analyze
    runs-on: ubuntu-latest
    permissions:
      contents: write
      actions: read
      checks: write
      pull-requests: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Check and apply dart format
        id: format-check
        run: |
          # Apply dart format
          dart format .

          # Check if there are any changes
          if ! git diff --quiet; then
            echo "🔧 Formatting changes detected"
            echo "needs_formatting=true" >> $GITHUB_OUTPUT

            # If this is the main branch, try to auto-commit
            if [ "${{ github.ref }}" = "refs/heads/main" ] && [ "${{ github.event_name }}" = "push" ]; then
              echo "📝 Attempting to commit formatting fixes to main branch..."
              git config --local user.email "action@github.com"
              git config --local user.name "GitHub Action"
              git add .
              git commit -m "🎨 Auto-fix: Apply dart format [skip ci]"

              # Try to push, but don't fail if it doesn't work
              if git push; then
                echo "✅ Successfully committed formatting fixes"
                echo "committed=true" >> $GITHUB_OUTPUT
              else
                echo "⚠️ Could not push directly, will create PR instead"
                echo "committed=false" >> $GITHUB_OUTPUT
              fi
            else
              echo "📋 Not main branch or not a push event, skipping auto-commit"
              echo "committed=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "✅ No formatting changes needed"
            echo "needs_formatting=false" >> $GITHUB_OUTPUT
            echo "committed=true" >> $GITHUB_OUTPUT
          fi

      - name: Generate formatting diff
        if: steps.format-check.outputs.needs_formatting == 'true' && steps.format-check.outputs.committed == 'false'
        id: formatting-diff
        run: |
          # Generate a detailed diff of formatting changes
          echo "## 🎨 Code Formatting Suggestions" > formatting_comment.md
          echo "" >> formatting_comment.md
          echo "The following files need formatting adjustments to follow Dart style guidelines:" >> formatting_comment.md
          echo "" >> formatting_comment.md

          # List changed files
          echo "### Files that need formatting:" >> formatting_comment.md
          git diff --name-only >> formatting_comment.md
          echo "" >> formatting_comment.md

          echo "### Formatting changes:" >> formatting_comment.md
          echo '```diff' >> formatting_comment.md
          git diff >> formatting_comment.md
          echo '```' >> formatting_comment.md
          echo "" >> formatting_comment.md

          echo "### How to apply these changes:" >> formatting_comment.md
          echo "Run the following command in your local repository:" >> formatting_comment.md
          echo '```bash' >> formatting_comment.md
          echo 'dart format .' >> formatting_comment.md
          echo '```' >> formatting_comment.md
          echo "" >> formatting_comment.md
          echo "_This comment was generated automatically by GitHub Actions._" >> formatting_comment.md

      - name: Comment on PR with formatting suggestions
        if: steps.format-check.outputs.needs_formatting == 'true' && steps.format-check.outputs.committed == 'false'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const commentBody = fs.readFileSync('formatting_comment.md', 'utf8');

            // Only comment on pull requests
            if (context.eventName === 'pull_request') {
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: commentBody
              });

              console.log('✅ Posted formatting suggestions as PR comment');
            } else {
              console.log('ℹ️ Not a pull request event, skipping comment');
            }

      - name: Reset formatting changes for further testing
        if: steps.format-check.outputs.needs_formatting == 'true' && steps.format-check.outputs.committed == 'false'
        run: |
          # Reset the formatting changes so tests run on original code
          git checkout .
          echo "⚠️ Code formatting is required. Please run 'dart format .' locally."
          echo "📋 A comment with formatting suggestions has been posted on the PR."

      - name: Analyze project source
        run: flutter analyze

      - name: Run tests
        run: |
          # Run unit and widget tests, excluding integration tests for now
          flutter test --coverage \
            --exclude-tags=integration \
            --dart-define=FLUTTER_TEST_INTEGRATION_DISABLED=true

  build-android:
    name: Build Android
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'zulu'
          java-version: '17'

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Build APK
        run: flutter build apk --release

      - name: Upload APK artifact
        uses: actions/upload-artifact@v4
        with:
          name: android-apk-pr-${{ github.event.number }}
          path: build/app/outputs/flutter-apk/app-release.apk
          retention-days: 30

  build-web:
    name: Build Web
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: '3.32.0'
          channel: 'stable'
          cache: true

      - name: Get dependencies
        run: flutter pub get

      - name: Build Web
        run: flutter build web --release --base-href="/ebk-info-app/"

      - name: Upload Web artifact
        uses: actions/upload-artifact@v4
        with:
          name: web-build
          path: build/web/
          retention-days: 30

  comment-artifacts:
    name: Comment APK Link
    runs-on: ubuntu-latest
    needs: [build-android, build-web]
    if: github.event_name == 'pull_request'
    permissions:
      pull-requests: write

    steps:
      - name: Comment on PR with build artifacts
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const prNumber = context.issue.number;
            const runId = context.runId;
            const repo = context.repo;

            const commentBody = `## 📱 Build Artifacts Ready!

            Your pull request has been built successfully! You can download the artifacts below:

            ### Android APK
            🤖 **Android APK**: [Download APK](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId}/artifacts)

            ### Web Build
            🌐 **Web Build**: [Download Web Build](https://github.com/${repo.owner}/${repo.repo}/actions/runs/${runId}/artifacts)

            ---

            **How to download:**
            1. Click on the artifact links above
            2. Find the \`android-apk-pr-${prNumber}\` or \`web-build\` artifact
            3. Click to download the ZIP file
            4. Extract and install/use the build

            **Note:** Artifacts are available for 30 days and require GitHub login to download.

            _This comment was automatically generated by GitHub Actions._`;

            // Check if we already commented on this PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: repo.owner,
              repo: repo.repo,
              issue_number: prNumber,
            });

            const existingComment = comments.find(comment =>
              comment.user.type === 'Bot' &&
              comment.body.includes('Build Artifacts Ready!')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: repo.owner,
                repo: repo.repo,
                comment_id: existingComment.id,
                body: commentBody
              });
              console.log('✅ Updated existing build artifacts comment');
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: repo.owner,
                repo: repo.repo,
                issue_number: prNumber,
                body: commentBody
              });
              console.log('✅ Posted new build artifacts comment');
            }
